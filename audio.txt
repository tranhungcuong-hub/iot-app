// ignore_for_file: camel_case_types, avoid_print, import_of_legacy_library_into_null_safe, prefer_interpolation_to_compose_strings
import 'package:flutter/material.dart';
import 'package:just_audio/just_audio.dart';
import 'package:microphone/microphone.dart';

enum AudioState { recording, stop, play, init }

const veryDarkBlue = Color(0xff172133);
const kindaDarkBlue = Color(0xff202641);

class audioRecorder extends StatefulWidget {
  const audioRecorder({Key? key}) : super(key: key);

  @override
  State<audioRecorder> createState() => _audioRecorderState();
}

class _audioRecorderState extends State<audioRecorder> {
  late AudioState audioState = AudioState.init;
  late MicrophoneRecorder _recorder;
  late AudioPlayer _audioPlayer;

  @override
  void initState() {
    super.initState();
    _recorder = MicrophoneRecorder()..init();
  }

  void handleAudioState(AudioState state) {
    setState(() {
      if (audioState == AudioState.init) {
        // Starts recording
        audioState = AudioState.recording;
        _recorder.start();
        // Finished recording
      } else if (audioState == AudioState.recording) {
        audioState = AudioState.stop;
        _recorder.stop();
        // Play recorded audio
      } else if (audioState == AudioState.play) {
        audioState = AudioState.stop;
        _audioPlayer = AudioPlayer();
        _audioPlayer.setUrl(_recorder.value.recording!.url).then((_) {
          _audioPlayer.play().then((_) {
            setState(() => audioState = AudioState.play);
          });
        });
        print('123456789');
        print(_recorder.value.recording?.url);

        // Stop recorded audio
      } else if (audioState == AudioState.stop) {
        audioState = AudioState.play;
        _audioPlayer.stop();
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Microphone Flutter App',
      home: Scaffold(
        backgroundColor: veryDarkBlue,
        body: Center(
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              AnimatedContainer(
                duration: const Duration(milliseconds: 300),
                padding: const EdgeInsets.all(24),
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  color: handleAudioColour(audioState),
                ),
                child: RawMaterialButton(
                  fillColor: Colors.white,
                  shape: const CircleBorder(),
                  padding: const EdgeInsets.all(30),
                  onPressed: () => handleAudioState(audioState),
                  child: getIcon(audioState),
                ),
              ),
              const SizedBox(width: 20),
              if (audioState == AudioState.play ||
                  audioState == AudioState.stop)
                Container(
                  padding: const EdgeInsets.all(24),
                  // ignore: prefer_const_constructors
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    color: kindaDarkBlue,
                  ),
                  child: RawMaterialButton(
                    fillColor: Colors.white,
                    shape: const CircleBorder(),
                    padding: const EdgeInsets.all(30),
                    onPressed: () => setState(() {
                      print(_recorder.value.recording!.url.toString());
                      audioState == AudioState.init;
                      _recorder.dispose();
                      _recorder = MicrophoneRecorder()..init();
                    }),
                    child: const Icon(Icons.replay, size: 50),
                  ),
                ),
            ],
          ),
        ),
      ),
      debugShowCheckedModeBanner: false,
    );
  }

  Color handleAudioColour(AudioState audioState) {
    if (audioState == AudioState.recording) {
      return Colors.deepOrangeAccent.shade700.withOpacity(0.5);
    } else if (audioState == AudioState.stop) {
      return Colors.green.shade900;
    } else {
      return kindaDarkBlue;
    }
  }

  Icon getIcon(AudioState state) {
    switch (state) {
      case AudioState.play:
        return const Icon(Icons.play_arrow, size: 50);
      case AudioState.stop:
        return const Icon(Icons.stop, size: 50);
      case AudioState.recording:
        return const Icon(Icons.mic, color: Colors.redAccent, size: 50);
      default:
        return const Icon(Icons.mic, size: 50);
    }
  }
}
